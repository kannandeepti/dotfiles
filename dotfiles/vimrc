" Bruno Beltran's [n]vimrc
"
" Rules about mappings:
"   1) (almost) never overwrite vanilla vim mappings
"   2) additional simple text-editing commands can be mapped without leader
"   3) commands that rely on external programs should be mapped with leader
"   4) commands should be grouped to be easy to use in vim's noun-verb-adverb[s]
"   convention. e.g. do not do anything that would require a count to go at the
"   end, and group commands so that they feel "composed" even if they're not,
"   like <leader>ga, <leader>gs, <leader>gc, for :Gitadd/status/commit.


" Use Vundle for plugins
" This section must be first, and verbatim/as is
if !exists("g:bruno_config_loaded_previously") " include guard for :so autocmds
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
" some plugin or another that I use is assuming I'm in .vim
" call vundle#rc('~/.vim/bundle')
call vundle#begin('~/.vim/bundle')

"""""""""""""""
" ALL YOUR PLUGINS ARE BELONG TO ME
"""""""""""""""
" Indispensible plugins. Note that gmarik/vundle must come first!
Plugin 'gmarik/vundle'
Plugin 'tpope/vim-endwise'      " complete if...end blocks and similar
Plugin 'tpope/vim-git'          " syntax/indent/etc files for git
Plugin 'tpope/vim-surround'     " 's[urround]' direct object, e.g. ds, cs, ys
Plugin 'tpope/vim-commentary'   " 'gc' verb to [un]comment lines
Plugin 'tpope/vim-repeat'       " make '.' work as expected for plugin maps
Plugin 'tpope/vim-speeddating'  " make <C-x> and <C-a> work on dates
Plugin 'tpope/vim-fugitive'     " git wrapper, <leader>g*
Plugin 'tpope/vim-obsession'    " save current open windows, folds, etc
Plugin 'tpope/vim-abolish'      " 'semantic' substitution? :Subvert, :Abolish
Plugin 'tpope/vim-vinegar'      " make netrw not suck, 'I' to toggle
Plugin 'junegunn/goyo.vim'      " distraction-free 'focus' writing mode
Plugin 'vim-scripts/indentpython.vim'       " PEP8-ier continued line indentation
Plugin 'tmhedberg/SimpylFold'   " good default code folding Python
Plugin 'scrooloose/syntastic'   " put externally checked errors in quickfix list
Plugin 'altercation/vim-colors-solarized'   " color scheme
Plugin 'bling/vim-airline'      " a powerline thingy for status on bottom/top
Plugin 'Lokaltog/vim-easymotion'            " skip around, <leader><leader>*
Plugin 'godlygeek/tabular'      " :Tabularize /<character to align by>
Plugin 'SirVer/ultisnips'       " autocomplete common long snippets
Plugin 'honza/vim-snippets'     " various pre-made snippets for UltiSnips
Plugin 'christoomey/vim-tmux-navigator'     " <A-hjkl> between vimdows and tpanes
Plugin 'davidhalter/jedi-vim'   " powerful python autcompletion/docs w/o YouCompleteMe
Plugin 'Valloric/YouCompleteMe' " powerful autocompletion engine. monolithic: TODO: remap
Plugin 'AndrewRadev/linediff.vim'           " diffs between visual selections
Plugin 'NLKNguyen/papercolor-theme'         " another color theme
" not clear why I need this since I use YouCompleteMe" Plugin 'ervandew/supertab'
" Plugin 'ivanov/vim-ipython'     " run code in an iPython console
Plugin 'bfredl/nvim-ipy'        " run code in an iPython console
Plugin 'ctrlpvim/ctrlp.vim'                 " fuzzy file finder, <leader>p*
Plugin 'FelikZ/ctrlp-py-matcher'            " make ctrlp faster
Plugin 'brunobeltran/vim-vmath' " fork of '++' summarizer for numbers
Plugin 'brunobeltran/vim-dragvisuals' " move visual selections <Up>/.../<Right>

" TODO
Plugin 'majutsushi/tagbar'      " browse C/C++ tag files in split
"decided it's better to just use web interface Plugin 'itchyny/calendar.vim'   " in-vim Calendar w/. Google support? (auth fail..)

" Required after pulling in all the plugins
call vundle#end()
filetype plugin indent on

""""""""""""""
" Now source non-external program dependent, non plugin dependent configs
"""""""""""""""
" make the config files automatically reload config on write
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost config_basic.vim source ~/.vimrc
autocmd! bufwritepost config_extended.vim source ~/.vimrc
autocmd! bufwritepost file_specific.vim source ~/.vimrc
source ~/.vim/config_basic.vim
source ~/.vim/config_extended.vim
source ~/.vim/file_specific.vim

endif " END include guard for sourcing autocmds
let g:bruno_config_loaded_previously=1

""""""""""""""""
" Now some plugins that need configuration
""""""""""""""""

" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gg :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>

" ctrl-p's name/default map overrides a feature I use commonly
let g:ctrlp_map = ''
nnoremap <leader>pp :CtrlP<cr>
nnoremap <leader>po :CtrlPMRUFiles<cr>
nnoremap <leader>pb :CtrlPBuffer<cr>
nnoremap <leader>pa :CtrlPMixed<cr>
" intelligently search up dirs first to check if we're in a git repo
let g:ctrlp_working_path_mode = 'ra'
" always jump to open windows
let g:ctrlp_switch_buffer = 'E'
" cache file names between vim sessions
let g:ctrlp_clear_cache_on_exit = 0
" using platform-independent spot for cache
let g:ctrlp_cache_dir = $HOME.'/.vim/temp_dirs/ctrlp'
" alt-opening with <c-y> in splits or tabs
let g:ctrlp_arg_map = 1
" how to open multiple files. the following says "open at most four files
" in splits, then the remaining in hidden bufferes
let g:ctrlp_open_multiple_files = '2vjr'
" make most recently used file list reasonably big
let g:ctrlp_mruf_max = 3000
" no number of maximum files, I'm on a modern machine
let g:ctrlp_max_files = 0
" actually I don't " i like dotfiles in general
" let g:ctrlp_show_hidden = 1
" unless they're .git or similar, which are already wildignore'd
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }
" faster matcher written in Python
if has('python')
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif
" If ag is available use it as filename list generator instead of 'find'
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --ignore ''.git'' --ignore ''.DS_Store'' --ignore ''node_modules'' --hidden -g ""'
endif

" use pylint for syntastic
" let g:syntastic_python_checkers = ['pyflakes3', 'pylint']
let g:syntastic_python_checkers = ['pyflakes3']
" known bug in pylint caused by dynamically created functions
let g:syntastic_python_pylint_args = "--extension-pkg-whitelist=numpy"
" don't check for errors on exit
let g:syntastic_check_on_wq = 0
" always populate loc list
let g:syntastic_always_populate_loc_list = 1

" airline is special, usually requires patched fonts
" Plugin 'bling/vim-airline'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline_theme="luna"
set laststatus=2
let g:airline_powerline_fonts = 1
"set encoding=utf-8
"let g:airline_powerline_fonts = 1
"set guifont=Fira\ Mono\ Medium\ for\ Powerline:h9

" Easymotion
" Plugin 'Lokaltog/vim-easymotion'
" remove <leader> to use for search by default
map  <Leader><Leader>/ <Plug>(easymotion-sn)
omap <Leader><Leader>/ <Plug>(easymotion-tn)
vmap <Leader><Leader>/ <Plug>(easymotion-tn)
map  <Leader><Leader>n <Plug>(easymotion-next)
map  <Leader><Leader>N <Plug>(easymotion-prev)
" avoid repeated hjkl input
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0
" smartcase is nice, so only match case if you include an uppercase letter
let g:EasyMotion_smartcase = 1


" ack, better version of grep
" Plugin 'mileszs/ack.vim'


" tabularize can be used to line up stuff based on regexes
" Plugin 'godlygeek/tabular'
" here's a mapping to automatically alighn on | when typing cucumber tables I'd
" like to extend this to align on & (but not on \&), and not in any "verbatim"
" modes like verbatim or lstlisting.
""  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
""  function! s:align()
""  let p = '^\s*|\s.*\s|\s*$'
""  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
""      let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
""      let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
""      Tabularize/|/l1
""      normal! 0
""      call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
""  endif
""  endfunction


" Make a seamless interface with tmux
" REQUIRES: extra config on tmux side
" use custom bindings
" Plugin 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
if has("win16") || has("win32")
    noremap <silent> <C-S-h> :TmuxNavigateLeft<cr>
    noremap <silent> <C-S-j> :TmuxNavigateDown<cr>
    noremap <silent> <C-S-k> :TmuxNavigateUp<cr>
    noremap <silent> <C-S-l> :TmuxNavigateRight<cr>
    noremap <silent> <C-S-\> :TmuxNavigatePrevious<cr>
elseif has("unix") || has("linux")
    cnoremap <silent> <M-h> <C-c>:TmuxNavigateLeft<cr>
    cnoremap <silent> <M-j> <C-c>:TmuxNavigateDown<cr>
    cnoremap <silent> <M-k> <C-c>:TmuxNavigateUp<cr>
    cnoremap <silent> <M-l> <C-c>:TmuxNavigateRight<cr>
    cnoremap <silent> <M-\> <C-c>:TmuxNavigatePrevious<cr>
    inoremap <silent> <M-h> <C-c>:TmuxNavigateLeft<cr>
    inoremap <silent> <M-j> <C-c>:TmuxNavigateDown<cr>
    inoremap <silent> <M-k> <C-c>:TmuxNavigateUp<cr>
    inoremap <silent> <M-l> <C-c>:TmuxNavigateRight<cr>
    inoremap <silent> <M-\> <C-c>:TmuxNavigatePrevious<cr>
    noremap <silent> <M-h> :TmuxNavigateLeft<cr>
    noremap <silent> <M-j> :TmuxNavigateDown<cr>
    noremap <silent> <M-k> :TmuxNavigateUp<cr>
    noremap <silent> <M-l> :TmuxNavigateRight<cr>
    noremap <silent> <M-\> :TmuxNavigatePrevious<cr>
    cnoremap <silent> <M-h> <C-c>:TmuxNavigateLeft<cr>
    cnoremap <silent> <M-j> <C-c>:TmuxNavigateDown<cr>
    cnoremap <silent> <M-k> <C-c>:TmuxNavigateUp<cr>
    cnoremap <silent> <M-l> <C-c>:TmuxNavigateRight<cr>
    cnoremap <silent> <M-\> <C-c>:TmuxNavigatePrevious<cr>
    inoremap <silent> <M-h> <C-c>:TmuxNavigateLeft<cr>
    inoremap <silent> <M-j> <C-c>:TmuxNavigateDown<cr>
    inoremap <silent> <M-k> <C-c>:TmuxNavigateUp<cr>
    inoremap <silent> <M-l> <C-c>:TmuxNavigateRight<cr>
    inoremap <silent> <M-\> <C-c>:TmuxNavigatePrevious<cr>
    noremap <silent> <M-h> :TmuxNavigateLeft<cr>
    noremap <silent> <M-j> :TmuxNavigateDown<cr>
    noremap <silent> <M-k> :TmuxNavigateUp<cr>
    noremap <silent> <M-l> :TmuxNavigateRight<cr>
    noremap <silent> <M-\> :TmuxNavigatePrevious<cr>
endif

" Finally
"""""""""""""
" omnicompletion/"intellisense
"""""""""""""
set tags+=tags;$HOME

" Baller addition to omnicompletion: JEDI-VIM
" auto-shows docs on typing, renames, goto def, etc
" Plugin 'davidhalter/jedi-vim'
" set up to not interfere with youcompleteme
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"
" and some shortcuts, k for 'kode'
let g:jedi#goto_assignments_command = "<leader>ka"
let g:jedi#goto_definitions_command = "<leader>kd"
let g:jedi#documentation_command = "<leader>kk"
map <leader>k? <leader>kk
let g:jedi#usages_command = "<leader>ku"
let g:jedi#rename_command = "<leader>kr"

" YOU COMPLETE ME
" Plugin 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['~/developer/*/*', '~/*']
let g:ycm_key_list_previous_completion=['<Up>']


" MAD SNIPPETS, YO
" let g:UltiSnipsExpandTrigger="<c-x>"
" let g:UltiSnipsJumpForwardTrigger="<c-a>"
" let g:UltiSnipsJumpBackwardTrigger="<c-s>"
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsSnippetDirectories=['UltiSnips']
"" Ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"

" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction

" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"
" " this mapping Enter key to <C-y> to chose the current highlight item
" " and close the selection list, same as other IDEs.
" " CONFLICT with some plugins like tpope/Endwise
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"

" from Damian Conway
"====[ dragvisuals ]====================
"#########################################################################
"##                                                                     ##
"##  Add the following (uncommented) to your .vimrc...                  ##
"##                                                                     ##
runtime plugin/dragvisuals.vim

vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()
" Remove any introduced trailing whitespace after moving...
let g:DVB_TrimWS=1

"====[ vmath ]====================
vmap <expr>  ++  VMATH_YankAndAnalyse()
nmap         ++  vip++

" Abolish abbreviations
" Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}

" nvim-ipy mappings, j for Jupyter
" not clear what interrupt and terminate should be mapped to
map <silent> <leader>jr <Plug>(IPy-Run)
map <silent> <C-x><C-j> <Plug>(IPy-Complete)
map <silent> <leader>j? <Plug>(IPy-WordObjInfo)
map <silent> <leader>jk <Plug>(IPy-WordObjInfo)
map <silent> <leader>ji <Plug>(IPy-Interrupt)
map <silent> <leader>jx <Plug>(IPy-Terminate)
